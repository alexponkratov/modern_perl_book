=encoding utf-8

=head1 Выразительность

Z<expressivity>

X<Wall, Larry>
X<Larry Wall>

Изучение Ларри Уоллом (Larry Wall) лингвистики и естественных языков повлияло на
дизайн Perl. Язык предоставляет вам потрясающую свободу в решении ваших задач,
в зависимости от вашего коллективного стиля, имеющегося времени, ожидаемого
срока жизни программы или даже вашего вдохновения. Вы можете писать
простой, прямолинейный код, или интегрировать его в большие, чётко
структурированные программы. Вы можете выбирать из множества парадигм дизайна,
можете избегать или приветствовать использование дополнительных возможностей.

Там, где другие языки навязывают один оптимальный способ написания кода, Perl
позволят I<вам> решать, какой вариант более читаемый, или полезный, или весёлый.

X<TIMTOWTDI>
X<Tim Toady>

У Perl-хакеров есть девиз для этого: I<TIMTOWTDI>, произносится как E<laquo>Tim
ToadyE<raquo> (E<laquo>Тим ТоудиE<raquo>), или E<laquo>There's more than one way
to do it!E<raquo> (E<laquo>Есть более чем один способ сделать это!E<raquo>).

Хотя эта выразительность позволяет мастерам создавать изумительные программы,
она же позволяет неблагоразумным и неосторожным устраивать беспорядок. Опыт и
хороший вкус приведут вас к написанию хорошего кода. Выбор за вами E<mdash> но
не забывайте о читаемости и поддерживаемости, особенно для тех, кто придёт после
вас.

Новички в Perl зачастую могут найти некоторые конструкции трудными для
понимания. Многие из этих идиом (L<idioms>) предлагают большую (хотя и
неочевидную) мощь. Вполне нормально избегать их, пока вы не будете чувствовать
себя с ними комфортно.

Изучение Perl подобно изучению нового разговорного языка. Вы изучите несколько
слов, составите предложения и вскоре будете наслаждаться простыми беседами.
Мастерство приходит с практикой чтения и написания. Вам не обязательно понимать
каждую деталь Perl, чтобы быть продуктивным, но принципы, изложенные в этой
главе, жизненно важны для вашего роста как программиста.

Ещё одна цель дизайна Perl состоит в том, чтобы пытаться избегать того, что
может удивить опытных (Perl) программистов. Например, сложение двух переменных
(C<$first_num + $second_num>) очевидно числовая операция (L<numeric_operators>);
оператор сложения должен воспринимать обе переменные как числовые значения,
чтобы получить числовой результат. Независимо от содержимого C<$first_num> и
C<$second_num>, Perl преобразует их в числовые значения (L<numeric_coercion>).
Вы выразили своё намерение работать с ними как с числами, использовав числовой
оператор. Perl с удовольствием сделает это.

X<DWIM>
X<principle of least astonishment>

Адепты Perl часто называют этот принцип I<DWIM>, или I<do what I mean> (I<делай
то, что я имею ввиду>). Иначе говоря, Perl следует
I<принципу наименьшего удивления>. Имея поверхностное понимание Perl (особенно
контекста, L<context_philosophy>), должно быть возможно понять смысл незнакомого
выражения. Вы разовьёте этот навык.

X<baby Perl>

Выразительность Perl, кроме того, позволяет новичкам писать полезные программы
без необходимости понимать всё. Получающийся код часто называют I<baby Perl>
(I<детский Perl>), в том смысле, что почти каждый хочет помочь детям научиться
хорошо говорить. Каждый начинает как новичок. Практикуясь и обучаясь у более
опытных программистов, вы будете понимать и воспринимать более мощные идиомы и
техники.

Например, опытный Perl-хакер может утроить список чисел таким образом:

=begin programlisting

    my @tripled = map { $_ * 3 } @numbers;

=end programlisting

E<hellip>а знаток Perl может написать так:

=begin programlisting

    my @tripled;

    for my $num (@numbers)
    {
        push @tripled, $num * 3;
    }

=end programlisting

E<hellip>тогда как новичок попытается сделать следующее:

=begin programlisting

    my @tripled;

    for (my $i = 0; $i < scalar @numbers; $i++)
    {
        $tripled[$i] = $numbers[$i] * 3;
    }

=end programlisting

Все три подхода делают одно и то же, но каждый использует Perl по-своему.

Опыт в программировании на Perl поможет вам фокусироваться на том, I<что> вам
нужно, а не на том, I<как> это сделать. В любом случае, Perl с удовольствием
будет выполнять простые программы. Вы можете разрабатывать и усовершенствовать
ваши программы для повышения ясности, выразительности, пригодности к повторному
использованию и поддерживаемости, частично или целиком. Пользуйтесь
преимуществами этой гибкости и прагматизма: намного лучше выполнить вашу задачу
эффективно сейчас, чем написать концептуально чистую и красивую программу в
следующем году.
