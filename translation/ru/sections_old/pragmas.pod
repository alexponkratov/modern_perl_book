=encoding utf-8

=head1 Прагмы

Z<pragmas>

X<pragmas>
X<modules; pragmas>

Большинство расширений Perl 5 E<mdash> модули, предоставляющие новые функции
или определяющие классы (L<moose>). Некоторые же модули вместо этого влияют на
поведение самого языка, как C<strict> или C<warnings>. Такие модули называют
I<прагмами>. По соглашению прагмы имеют имена в нижнем регистре, чтобы отличить
их от других модулей.

=head2 Прагмы и область видимости

X<pragmas; scope>

Прагмы работают посредством экспорта определённого поведения или информации в
лексические области видимости вызывающего их кода. Так же как объявление
лексической переменной делает символическое имя доступным в пределах области
видимости, использование прагм делает их поведение действующим в пределах этой
области видимости:

=begin programlisting

    {
        # $lexical B<невидима>; strict B<не действует>
        {
            use strict;
            my $lexical = 'available here';
            # $lexical B<видима>; strict B<действует>
            ...
        }
        # $lexical снова невидима; strict B<не> действует
    }

=end programlisting

Также как лексические объявления воздействуют на внутренние области видимости,
прагмы сохраняют свой эффект во внутренних областях видимости:

=begin programlisting

    # область видимости файла
    use strict;

    {
        # внутренняя область видимости, но strict всё ещё действует
        my $inner = 'another lexical';
        ...
    }

=end programlisting

=head2 Использование прагм

X<pragmas; enabling>

Подключайте прагмы с помощью C<use>, как и любой другой модуль. Прагмы принимают
аргументы, такие как минимальный номер используемой версии и список аргументов
для изменения поведения прагмы:

=begin programlisting

    # требует объявления переменных, запрещает голые слова
    use strict qw( subs vars );

=end programlisting

X<pragmas; disabling>
X<builtins; C<no>>

Иногда вам нужно I<отключить> все или часть этих эффектов в глубже вложенной
лексической области видимости. Встроенная директива C<no> отменяет импорт
(L<importing>), что отменяет эффекты правильно работающих прагм. Например, так
можно отключить защиту C<strict>, если вам нужно сделать что-нибудь символьное:

=begin programlisting

    use Modern::Perl;
    # или use strict;

    {
        no strict 'refs';
        # здесь можно манипулировать символьной таблицей
    }

=end programlisting

=head2 Полезные прагмы

X<magic variables; C<$^H>>
X<pragmas; writing>

Perl 5.10.0 добавил возможность писать свои собственные лексические прагмы в
виде кода на чистом Perl. C<perldoc perlpragma> объясняет как это делать, а
описание C<$^H> в C<perldoc perlvar> объясняет, как эта возможность работает.

X<pragmas; useful core pragmas>

Но и до 5.10 Perl 5 включал несколько полезных встроенных прагм.

X<pragmas; C<strict>>

=over 4

=item * прагма C<strict> включает проверку компилятором символических ссылок,
использования голых слов и объявлений переменных.

X<pragmas; C<warnings>>

=item * прагма C<warnings> включает опциональные предупреждения о
нерекомендуемых, непреднамеренных и неудачных поведений.

X<pragmas; C<utf8>>

=item * прагма C<utf8> заставляет парсер воспринимать исходный код как имеющий
кодировку UTF-8.

X<pragmas; C<autodie>>

=item * прагма C<autodie> включает автоматическую проверку ошибок системных
вызовов и встроенных функций.

X<pragmas; C<constant>>

=item * прагма C<constant> позволяет вам создавать константные значения времени
компиляции (см. C<Const::Fast> CPAN в качестве альтернативы).

X<pragmas; C<vars>>

=item * прагма C<vars> позволяет вам объявлять глобальные переменные пакета,
такие как C<$VERSION> или C<@ISA> (L<blessed_references>).

X<pragmas; C<feature>>

=item * прагма C<feature> позволяет вам отдельно включать и отключать
возможности Perl 5, появившиеся после 5.10. Как C<use 5.14;> включает все
возможности Perl 5.14 и прагму C<strict>, так и C<use feature ':5.14';> делает
то же самое. Эта прагма более полезна для I<отключения> отдельных возможностей
в лексической области видимости.

X<pragmas; C<less>>

=item * прагма C<less> демонстрирует, как написать прагму.

=back

CPAN начал собирать невстроенные прагмы:

X<CPAN; C<autobox>>
X<CPAN; C<perl5i>>
X<CPAN; C<autovivification>>
X<CPAN; C<indirect>>

=over 4

=item * C<autobox> включает объектоподобное поведение для встроенных типов
Perl 5 (скаляров, ссылок, массивов и хешей).

=item * C<perl5i> собирает и включает многие экспериментальные расширения языка
в одно целое.

=item * C<autovivification> отключает автовивификацию (L<autovivification>)

=item * C<indirect> предотвращает использование непрямых вызовов
(L<indirect_objects>)

=back

Эти инструменты пока не имеют широкого использования. Два последних могут помочь
вам писать более корректный код, тогда как с двумя предыдущими стоит
поэкспериментировать в небольших проектах. Они показывают, чем мог бы быть
Perl 5.
