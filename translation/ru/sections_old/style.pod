=encoding utf-8

Z<style>

=head1 Написание поддерживаемого кода на Perl

X<maintainability>

I<Поддерживаемость> E<mdash> туманная мера простоты понимания и изменения
существующей программы. Оставьте какой-нибудь код в стороне на шесть месяцев, а
затем снова к вернитесь нему. Поддерживаемость определяет сложность, с котороый
вы встретитесь при внесении изменений.

Поддерживаемость E<mdash> не вопрос синтаксиса, как и не мера того, как ваш код
будет выглядеть для непрограммиста. Представим компетентного программиста,
понимающего суть задачи, которую код должен решать. С какими проблемами он
встретится при корректном исправлении бага или добавлении улучшений?

Способность писать поддерживаемый код приходит из заработанного тяжёлым трудом
опыта и поддерживается умелым обращением с идиомами, техниками и преобладающим
стилем языка. Но даже новички могут улучшить поддерживаемость своего кода,
следуя нескольким принципам:

=over 4

=item * I<Избавляйтесь от дублирования.> Баги скрываются в кусках повторяющегося
и одинакового кода E<mdash> когда вы исправите баг в одном месте, исправите ли в
другом? Когда вы внесёте изменения в одно место, внесёте ли в другое?

Хорошо спроектированные системы содержат мало дублирования. Они используют
функции, модули, объекты и роли для выделения дублирующегося кода в пригодные
для повторного использования компоненты, которые точно моделируют предметную
область задачи. Самый лучший дизайн позволяет вам добавлять возможности,
I<удаляя> код.

=item * I<Правильно именуйте сущности.> Ваш код рассказывает историю. Каждый
именованный символ E<mdash> переменные, функции, модели, классы E<mdash>
позволяет вам прояснить или затуманить свои намерения. Простота выбора имён
показывает ваше понимание проблемы и ваш дизайн. Выбирайте ваши имена тщательно.

=item * I<Избегайте ненужной заумности.> Краткий код хорош, если он отражает
намерение кода. Заумный код скрывает ваши намерения за яркими трюками. Perl
даёт вам возможность писать правильный код в правильное время. Там, где
возможно, используйте наиболее очевидное решение. Опыт, хороший вкус и понимание
того, что на самом деле важно, будут направлять вас.

Некоторые задачи требуют изощрённых решений. Инкапсулируйте этот код за простым
интерфейсом и документируйте свою изощрённость.

=item * I<Поощряйте простоту.> При прочих равных, более простую программа легче
поддерживать, чем её более сложный аналог. Простота означает понимание того, что
наиболее важно, и выполнение ровно этого.

Всё это не может служить извинением попыток увильнуть от обработки ошибок, или
модульности, или валидации, или безопасности. Простой код может использовать
продвинутые возможности. Простой код может применять огромные залежи
CPAN-модулей. Простой код может требовать некоторого труда для его понимания.
Однако простой код решает проблемы эффективно, без выполнения ненужной работы.

Иногда вам требуется мощный, надёжный код. Иногда вам требуется однострочник.
Простота означает понимание разницы и создание только того, что вам нужно.

=back

=head1 Написание идиоматического кода на Perl

X<idioms>

Perl свободно заимствует у других языков. Perl позволяет вам писать код так, как
вы хотите его писать. Программисты на C зачастую пишут на Perl в стиле C, также
как Java-программисты пишут на Perl в стиле Java. Эффективные Perl-программисты
пишут на Perl в стиле Perl, включая применение идиом языка.

=over 4

=item * I<Понимайте мудрость сообщества.> Perl-программисты зачастую ведут
яростные дебаты о разных техниках. Кроме того, Perl-программисты часто делятся
результатами своего труда, и не только в CPAN. Обращайте на это внимание и
просвещайтесь в области компромиссов между разными идеалами и стилями.

CPAN-разработчики, Perl-монгеры и участники списков рассылок обладают
заработанным тяжёлым трудом опытом в решении задач мириадами разных способов.
Говорите с ними. Читайте их код. Задавайте вопросы. Учитесь у них и давайте им
учиться у вас.

X<CPAN; C<Perl::Critic>>
X<CPAN; C<Perl::Tidy>>
X<CPAN; C<CPAN::Mini>>

=item * I<Следуйте нормам сообщества.> Perl E<mdash> сообщество
инструментальщиков. Мы выполняем широкий круг задач, включая
статический анализ кода (C<Perl::Critic>), переформатирование (C<Perl::Tidy>) и
частные системы распространения (C<CPAN::Mini>). Пользуйтесь инфраструктурой
CPAN; следуйте модели CPAN в написании, документировании, сборке, тестировании и
распространении вашего кода.

=item * I<Читайте код.> Присоединяйтесь к спискам рассылок, таким как Perl
Beginners (U<http://learn.perl.org/faq/beginners.html>), просматривайте
PerlMonks (U<http://perlmonks.org/>) и другими способами погружайтесь в
сообществоN<См. U<http://www.perl.org/community.html>.>. Читайте код и пытайтесь
отвечать на вопросы E<mdash> даже если вы сами никогда их не задаёте, это
отличная возможность учиться.

=back

=head1 Написание эффективного кода на Perl

X<efficacy>

Поддерживаемость E<mdash> в конечном счёте, вопрос дизайна. Хороший дизайн
приходит с практикой полезных привычек:

=over 4

=item * I<Пишите тестируемый код.> Написание эффективного набора тестов
упражняет те же самые навыки дизайна, что и написание эффективного кода. Код
есть код. Кроме того, хорошие тесты дают вам при модификации программы
уверенность в том, что она продолжает работать правильно.

=item * I<Разбивайте на модули.> Обеспечивайте соблюдение границ инкапсуляции и
абстракции. Находите правильные интерфейсы между компонентами. Правильно
именуйте сущности и помещайте их туда, где им место. Модульность заставляет вас
размышлять об абстракциях в ваших программах для понимания того, как всё это
работает вместе. Находите куски, которые не вписываются. Улучшайте свой код до
тех пор, пока они не впишутся.

=item * I<Следуйте разумным стандартам кодирования.> Эффективные руководства
определяют обработку ошибок, безопасность, инкапсуляцию, дизайн API, план
проекта и другие вопросы поддерживаемости. Отличные руководства помогают
разработчикам общаться друг с другом через код. Вы выполняете задачи. Говорите
чётко.

=item * I<Используйте CPAN.> Perl-программисты решают задачи. Затем мы делимся
полученными решениями. Пользуйтесь этим увеличителем силы. Сначала поищите в
CPAN решение или частичное решение вашей проблемы. Инвестируйте время в
исследования; оно окупится.

Если вы найдёте баг, сообщите о нём. Предложите патч, если возможно. Исправьте
опечатку. Попросите реализовать возможность. Скажите E<laquo>Спасибо!E<raquo>.
Вместе мы лучше, чем по отдельности. Мы сильны и эффективны, если повторно
используем код.

Когда вы готовы, когда вы решили новую задачу, поделитесь решением.
Присоединяйтесь к нам. Мы решаем задачи.

=back
