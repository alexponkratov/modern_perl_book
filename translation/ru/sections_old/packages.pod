=encoding utf-8

=head1 Пакеты

Z<packages>
X<packages>
X<namespaces>

I<Пространство имён> в Perl объединяет и инкапсулирует разные именованные
сущности в одной именованной категории, как ваша фамилия или название бренда. В
отличие от имён в реальном мире, пространство имён не подразумевает никаких
непосредственных взаимосвязей между сущностями. Такие взаимосвязи могут
существовать, но не обязаны.

I<Пакет> в Perl 5 E<mdash> это набор кода в едином пространстве имён. Имеется
тонкое различие: пакет представляет собой исходный код, а пространство имён
E<mdash> сущность, создаваемую, когда Perl парсит этот код.

X<builtins; C<package>>

Встроенная директива C<package> объявляет пакет и пространство имён:

=begin programlisting

    package MyCode;

    our @boxes;

    sub add_box { ... }

=end programlisting

X<namespaces; fully qualified>

Все глобальные переменные, которые объявляются или на которые ссылаются после
объявления пакета, ссылаются на символы в пространстве имён C<MyCode>. Вы можете
ссылаться на переменную C<@boxes> из пространства имён C<main> только по её
I<полностью определённому> имени C<@MyCode::boxes>. Полностью определённое имя
включает полное имя пакета, так что вы можете вызвать функцию C<add_box()>
только как C<MyCode::add_box()>.

X<scope; packages>

Область видимости пакета продолжается до следующего объявления C<package> или до
конца файла, что будет достигнуто раньше. Perl 5.14 усовершенствовал C<package>,
так что теперь вы можете добавить блок, который явно очертит область видимости
объявления:

=begin programlisting

    package Pinball::Wizard
    {
        our $VERSION = 1969;
    }

=end programlisting

Пакет по умолчанию E<mdash> C<main>. Без объявления пакета, текущим пакетом
будет C<main>. Это правило распространяется на однострочники, автономные
программы и даже файлы F<.pm>.

X<packages; versions>
X<C<$VERSION>>

Кроме имени пакет имеет версию и три неявных метода, C<import()>
(L<importing>), C<unimport()> и C<VERSION()>. C<VERSION()> возвращает
номер версии пакета. Этот номер представляет собой последовательность чисел,
содержащуюся в глобальной переменной пакета с именем C<$VERSION>. По примерному
соглашению, версии имеют тенденцию быть последовательностью целых чисел,
разделённых точками, как в C<1.23> или C<1.1.10>, где каждый сегмент E<mdash>
целое число.

X<version numbers>

Perl 5.12 представил новый синтаксис, предназначенный для упрощения номеров
версий, как документировано в C<perldoc version::Internals>. Эти более строгие
номера версий должны начинаться с символа C<v> и иметь как минимум три
целочисленных компонента, разделённых точками:

=begin programlisting

    package MyCode v1.2.1;

=end programlisting

В Perl 5.14 опциональная блочная форма объявления C<package> выглядит так:

=begin programlisting

    package Pinball::Wizard v1969.3.7
    {
        ...
    }

=end programlisting

В 5.10 и раньше, самым простым способом объявить версию пакета следующий:

=begin programlisting

    package MyCode;

    our $VERSION = 1.21;

=end programlisting

X<C<UNIVERSAL>>
X<C<VERSION()>>

Каждый пакет наследует метод C<VERSION()> от базового класса C<UNIVERSAL>. Вы
можете переопределить C<VERSION()>, хотя есть не так много причин это делать.
Этот метод возвращает значение C<$VERSION>:

=begin programlisting

    my $version = Some::Plugin->VERSION();

=end programlisting

Если вы укажете номер версии в качестве аргумента, этот метод выбросит
исключение, если версия модуля меньше указанного аргумента:

=begin programlisting

    # требует как минимум 2.1
    Some::Plugin->VERSION( 2.1 );

    die "Your plugin $version is too old"
        unless $version > 2;

=end programlisting

=head2 Пакеты и пространства имён

X<namespaces>
X<packages; namespaces>

Каждое объявление C<package> создаёт новое пространство имён, если необходимо, и
заставляет парсер разместить все глобальные символы следующего затем пакета
(глобальные переменные и функции) в этом пространстве имён.

X<namespaces; open>

В Perl I<открытые пространства имён>. Вы можете добавлять функции или переменные
в это пространство имён в любом месте, как с помощью нового объявления пакета:

=begin programlisting

    package Pack
    {
        sub first_sub { ... }
    }

    Pack::first_sub();

    package Pack
    {
        sub second_sub { ... }
    }

    Pack::second_sub();

=end programlisting

E<hellip>так и с помощью указания полностью определённых имён функций в местах
объявления:


=begin programlisting

    # подразумевается
    package main;

    sub Pack::third_sub { ... }

=end programlisting

Вы можете делать добавления в пакет в любой точке во время компиляции или
выполнения, независимо от текущего файла, хотя сборка пакета из нескольких
отдельных объявлений может сделать код трудным для исследования.

X<namespaces; multi-level>

Пространства имён могут иметь столь много уровней, сколько требует ваша
организационная схема, хотя пространства имён E<mdash> не иерархические. Единственная
взаимосвязь между пакетами E<mdash> семантическая, не техническая. Многие
проекты и бизнесы создают свои собственные пространства имён верхнего уровня.
Это уменьшает вероятность глобальных конфликтов и помогает организовать код на
диске. Например:

=over 4

=item * C<StrangeMonkey> E<mdash> имя проекта

=item * C<StrangeMonkey::UI> содержит код верхнего уровня для пользовательского интерфейса

=item * C<StrangeMonkey::Persistence> содержит код верхнего уровня для управления данными

=item * C<StrangeMonkey::Test> содержит код верхнего уровня для тестирования проекта

=back

E<hellip>и т. д.
