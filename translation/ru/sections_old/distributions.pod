=encoding utf-8

=head1 Дистрибутивы

Z<distributions>

X<distribution>

Самый простой способ управлять конфигурацией, сборкой, упаковкой, тестированием и
установкой программного обеспечения E<mdash> следовать соглашениям
CPAN-дистрибутивов. I<Дистрибутив> E<mdash> это набор метаданных и одного или
нескольких модулей (L<modules>), формирующих одну пригодную для распространения,
тестирования и установки единицу.

Все эти руководства E<mdash> как упаковать дистрибутив, как разрешать его
зависимости, куда устанавливать программное обеспечение, как проверять, что оно
работает, как отображать документацию, как управлять репозиторием E<mdash>
родились из примерного консенсуса тысяч контрибуторов, работающих над десятками
тысяч проектов. Дистрибутив, построенный по стандартам CPAN, может быть
протестирован на нескольких версиях Perl 5 на нескольких разных аппаратных
платформах в течение нескольких часов после загрузки, при этом об ошибках будет
автоматически сообщено авторам E<mdash> и всё это без вмешательства человека.

Вы можете никогда не выпускать свой код как публичные CPAN-дистрибутивы, но вы
можете использовать инструменты и соглашения CPAN даже для управления частным
кодом. Сообщество Perl построило восхитительную инфраструктуру; почему бы ей не
воспользоваться?

=head2 Характеристики дистрибутива

Помимо одного или нескольких модулей, дистрибутив включает несколько других
файлов и директорий:

=over 4

=item * F<Build.PL> или F<Makefile.PL>, программа-драйвер, используемая для
конфигурации, сборки, тестирования, компоновки и установки дистрибутива.

=item * F<MANIFEST>, список всех файлов, входящих в дистрибутив. Это помогает
инструментам удостовериться, что комплект полон.

=item * F<META.yml> и/или F<META.json>, файл, содержащий метаданные о
дистрибутиве и его зависимостях.

=item * F<README>, описание дистрибутива, его предназначения, его авторских прав
и информации о лицензии.

=item * F<lib/>, директория, в которой содержатся Perl-модули.

=item * F<t/>, директория, в которой содержатся файлы тестов.

=item * F<Changes>, лог каждого изменения дистрибутива.

=back

X<CPAN; CPANTS>

Правильно построенный дистрибутив должен содержать уникальное имя и единый
номер версии (который часто берётся из его основного модуля). Любой дистрибутив,
который вы скачаете из публичной CPAN, должен соответствовать этим стандартам.
Публичный сервис CPANTS (U<http://cpants.perl.org/>) проверяет каждый
загруженный модуль по руководствам и соглашениям сборки и рекомендует улучшения.
Следование руководствам CPANTS не означает, что код работает, но означает, что
инструменты сборки CPAN должны понять дистрибутив.

=head2 Инструменты CPAN для управления дистрибутивами

Ядро Perl 5 включает несколько инструментов для установки, разработки и
управления вашими собственными дистрибутивами:

X<C<CPAN>>
X<C<CPANPLUS>>

=over 4

=item * C<CPAN.pm> E<mdash> официальный CPAN-клиент; C<CPANPLUS> E<mdash>
альтернатива. Они в основном аналогичны. Хотя по умолчанию эти клиенты
устанавливают дистрибутивы из публичной CPAN, вы можете вместо или дополнительно
к этому направить их на свой собственный репозиторий.

X<C<Module::Build>>

=item * C<Module::Build> E<mdash> это написанный на чистом Perl набор
инструментов для конфигурирования, сборки, установки и тестирования
дистрибутивов. Он работает с файлами F<Build.PL>.

X<C<ExtUtils::MakeMaker>>

=item * C<ExtUtils::MakeMaker> E<mdash> это унаследованный инструмент, на замену
которому предназначен C<Module::Build>. Он всё ещё широко используется, хотя
находится в режиме поддержки и получает только критические исправления ошибок.
Он работает с файлами F<Makefile.PL>.

X<C<Test::More>>

=item * C<Test::More> (L<testing>) E<mdash> базовый и самый широко используемый
модуль тестирования, предназначенный для написания автоматизированных тестов
для программного обеспечения на Perl.

X<C<Test::Harness>>
X<C<prove>>

=item * C<Test::Harness> и C<prove> (L<running_tests>) запускают тесты и
интерпретируют и генерируют отчёты по их результатам.

=back

В дополнение к этому, несколько дополнительных CPAN-модулей сделают легче вашу
жизнь как разработчика:

X<CPAN; C<App::cpanminus>>
X<cpanminus>
X<cpanm>

=over 4

=item * C<App::cpanminus> E<mdash> это не требующий конфигурации CPAN-клиент. Он
обрабатывает наиболее распространённые случаи, использует мало памяти и быстро
работает.

X<CPAN; C<App::perlbrew>>
X<perlbrew>

=item * C<App::perlbrew> помогает вам управлять несколькими инсталляциями
Perl 5. Установите новые версии Perl 5 для тестирования или производственной
среды, или чтобы изолировать приложения и их зависимости.

X<CPAN; C<CPAN::Mini>>
X<CPAN; C<cpanmini>>

=item * C<CPAN::Mini> и комманда C<cpanmini> позволяют вам создать своё
собственное (частное) зеркало публичной CPAN. Вы можете ввести в этот
репозиторий свои собственные дистрибутивы и управлять тем, какие версии
публичных модулей доступны в вашей организации.

X<CPAN; C<Dist::Zilla>>
X<CPAN; C<Module::Build>>
X<C<ExtUtils::MakeMaker>>

=item * C<Dist::Zilla> автоматизирует наиболее распространённые задачи
распространения дистрибутивов. Хотя он использует либо C<Module::Build>, либо
C<ExtUtils::MakeMaker>, он может заменить I<ваше> использование их напрямую.
Смотрите интерактивное руководство по адресу U<http://dzil.org/>.

X<CPAN; C<Test::Reporter>>

=item * C<Test::Reporter> позволяет вам выводить отчёты по результатам запуска
набора автоматизированных тестов дистрибутивов, которые вы устанавливаете, давая
их авторам больше данных о сбоях.

=back

=head2 Проектирование дистрибутивов

X<CPAN; C<Module::Starter>>

Описание процесса проектирования дистрибутива может занять целую книгу (см.
I<Writing Perl Modules for CPAN> Сэма Трегара (Sam Tregar)), но несколько
принципов дизайна помогут вам. Начните с такой утилиты как C<Module::Starter>
или C<Dist::Zilla>. Начальная стоимость изучения конфигурации и правил может
выглядеть как чрезмерная инвестиция, но преимущества того, что всё будет
правильно настроено (и в случае C<Dist::Zilla> I<никогда> не устареет)
освобождает вас от намного более утомительной бухгалтерии.

Затем рассмотрите несколько правил:

=over 4

=item * I<Каждый дистрибутив должен иметь единственное, чётко определённое
предназначение.> Этим предназначением может быть даже сборка нескольких
связанных дистрибутивов в один устанавливаемый комплект. Декомпозиция вашего
программного обеспечения на отдельные дистрибутивы позволяет вам соответственно
управлять их зависимостями и соблюдать их инкапсуляцию.

=item * I<Каждый дистрибутив должен иметь единственный номер версии.> Номера
версий всегда должны увеличиваться. Политика семантических версий
(U<http://semver.org/>) разумна и совместима с подходом Perl 5.

=item * I<Каждый дистрибутив требует хорошо определённого API.> Всесторонний
автоматизированный набор тестов может проверить, что вы поддерживаете этот API
между версиями. Если вы используете локальное зеркало CPAN для установки своих
собственных дистрибутивов, вы можете использовать инфраструктуру CPAN для
тестирования дистрибутивов и их зависимостей. Вы получите лёгкий доступ к
интеграционному тестированию пригодных к повторному использованию компонентов.

=item * I<Автоматизируйте тесты вашего дистрибутива и сделайте их повторяемыми и
ценными.> Инфраструктура CPAN поддерживает отчёты автоматизированного
тестирования. Используйте это!

=item * I<Предоставьте эффективный и простой интерфейс.> Избегайте использования
глобальных символов и экспорта по умолчанию; позвольте людям использовать только
то, что им нужно. Не загрязняйте их пространства имён.

=back
