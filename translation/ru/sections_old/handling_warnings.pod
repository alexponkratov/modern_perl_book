=encoding utf-8

=head1 Обработка предупреждений

Z<handling_warnings>

Хотя существует более чем один способ написать работающую программу на Perl 5,
некоторые из этих способов могут быть путающими, неясными и даже некорректными
в некоторых хитрых ситуациях. Система опциональных предупреждений в Perl 5 может
помочь вам распознавать такие ситуации и избегать их.

=head2 Генерация предупреждений

Z<producing_warnings>

X<builtins; C<warn>>

Используйте встроенную функцию C<warn> чтобы выдать предупреждение:

=begin programlisting

    warn 'Something went wrong!';

=end programlisting

C<warn> выводит список значений в файловый дескриптор STDERR (L<filehandle>).
Perl будет добавлять имя файла и номер строки, на которой произошёл вызов
C<warn>, если последний элемент списка не заканчивается переводом строки.

X<C<Carp>>
X<C<Carp>; C<carp()>>
X<C<Carp>; C<cluck()>>
X<C<Carp>; C<croak()>>
X<C<Carp>; C<confess()>>

Встроенный модуль C<Carp> предлагает другие механизмы для генерации
предупреждений. Его функция C<carp()> выводит предупреждение с точки зрения
вызывающего кода. Если есть такая валидация параметров функции:

=begin programlisting

    use Carp 'carp';

    sub only_two_arguments
    {
        my ($lop, $rop) = @_;
        carp( 'Too many arguments provided' ) if @_ > 2;
        ...
    }

=end programlisting

E<hellip>предупреждение об арности (L<arity>) будет включать имя файла и номер
строки I<вызывающего> кода, а не C<only_two_arguments()>. C<cluck()> из того же
модуля C<Carp> аналогично генерирует обратную трассировку всех вызовов функций
до текущей функции.

X<C<Carp>; verbose>

Многословный режим C<Carp> добавляет обратную трассировку ко всем
предупреждениям, генерируемым C<carp()> и C<croak()> (L<reporting_errors>) по
всей программе:

=begin screen

    $ perl -MCarp=verbose my_prog.pl

=end screen

Используйте C<Carp> при написании модулей (L<modules>) вместо C<warn> или
C<die>.

=head2 Включение и выключение предупреждений

X<C<-w>; enable warnings command-line argument>
X<command-line arguments; C<-w>>

В старом коде вы можете встретить аргумент командной строки C<-w>. Он включает
предупреждения по всей программе, даже во внешних модулях, написанных и
поддерживаемых другими людьми. Тут всё или ничего, хотя это и может быть
полезным, если у вас есть необходимые средства для устранения и предупреждений,
и потенциальных предупреждений по всей кодовой базе.

X<C<warnings>>
X<pragmas; C<warnings>>

Современный подход E<mdash> использование прагмы C<warnings>N<E<hellip>или
эквивалента, такого как C<use Modern::Perl;>.>. Это включает предупреждения в
I<лексической> области видимости и указывает, что автор кода не подразумевает,
что в нормальных условиях он будет генерировать предупреждения.

=begin tip Глобальные флаги предупреждений

X<C<-W>; enable warnings command-line argument>
X<command-line arguments; C<-W>>
X<C<-X>; disable warnings command-line argument>
X<command-line arguments; C<-X>>

Флаг C<-W> включает предупреждения по всей программе в одностороннем порядке,
независимо от лексического включения или выключения с помощью прагмы
C<warnings>. Флаг C<-X> I<отключает> предупреждения по всей программе в
одностороннем порядке. Ни один из них не имеет широкого распространения.

=end tip

X<C<$^W>>
X<global variables; C<$^W>>

Все эти флаги, C<-w>, C<-W> и C<-X>, воздействуют на глобальную переменную
C<$^W>. Код, написанный до появления прагмы C<warnings> (Perl 5.6.0 весной
2000 года) может локализовать C<$^W>, чтобы подавить некоторые предупреждения
в пределах заданной области видимости.

=head2 Отключение категорий предупреждений

Чтобы отключить выбранные предупреждения в области видимости, используйте
C<no warnings;> со списком аргументов. Опускание списка аргументов отключает
все предупреждения в этой области видимости.

C<perldoc perllexwarn> приводит список всех категорий предупреждений, которые
ваша версия Perl 5 воспринимает с прагмой C<warnings>. Большая часть из них
представляет действительно интересные условия, но некоторые могут быть явно
бесполезны в ваших конкретных обстоятельствах. Например, предупреждение
C<recursion> будет происходить, если Perl обнаружил, что функция вызвала себя
более чем сто раз. Если вы уверены в своей способности написать условия
завершения рекурсии, вы можете отключить это предупреждение в области видимости
рекурсии (хотя хвостовые вызовы, возможно, подойдут лучше; L<tail_calls>).

Если вы генерируете код (L<code_generation>) или локально переопределяете
символы, вам может понадобиться отключить предупреждение C<redefine>.

Некоторые опытные Perl-хакеры отключают предупреждение об неинициализированных
значениях (C<uninitialized>) в коде обработки строк, который конкатенирует
значения из множества источников. Тщательная инициализация переменных
помогает избежать необходимости отключения предупреждения, но локальный стиль
и лаконичность могут сделать использование этого предупреждения спорным.

=head2 Сделать предупреждения фатальными

Z<fatal_warnings>
X<warnings; fatal>

Если ваш проект считает предупреждения такими же обременительными, как ошибки,
вы можете сделать их лексически фатальными. Так можно повысить I<все>
предупреждения до исключений:

=begin programlisting

    use warnings FATAL => 'all';

=end programlisting

Также вы можете сделать фатальными конкретные категории предупреждений, как,
например, использование нерекомендуемых конструкций:

=begin programlisting

    use warnings FATAL => 'deprecated';

=end programlisting

С надлежащей дисциплиной, это может привести к очень надёжному код E<mdash> но
будьте осторожны. Многие предупреждения вызываются условиями времени исполнения.
Если ваш набор тестов не сможет распознать все предупреждения, с которыми вы
можете столкнуться, ваша программа может завершиться при выполнении из-за
непойманного исключения.

=head2 Отлавливание предупреждений

X<C<$SIG{__WARN__}>>
X<warnings; catching>

Так же как вы ловите исключения, так же вы можете ловить и предупреждения.
Переменная C<%SIG>N<См. C<perldoc perlvar>.> содержит обработчики внеполосных
сигналов, генерируемых Perl или вашей операционной системой. Чтобы поймать
предупреждение, присвойте C<$SIG{__WARN__}> ссылку на функцию:

=begin programlisting

    {
        my $warning;
        local $SIG{__WARN__} = sub { $warning .= shift };

        # сделать что-нибудь рискованное
        ...

        say "Caught warning:\n$warning" if $warning;
    }

=end programlisting

Внутри обработчика предупреждений, первым аргументом будет сообщение
предупреждения. Надо сказать, эта техника менее удобна, чем отключение
предупреждений лексически E<mdash> но это может оказаться полезным в тестовых
модулях, таких как C<Test::Warnings> из CPAN, где важен фактический текст
предупреждения.

Имейте ввиду, что переменная C<%SIG> глобальна. Локализуйте её в наименьшей
возможной области видимости с помощью C<local>, но понимайте, что это всё ещё
глобальная переменная.

=head2 Регистрация своих собственных предупреждений

Z<registering_warnings>

X<warnings; registering>
X<lexical warnings>

Прагма C<warnings::register> позволяет вам создавать свои собственные
лексические предупреждения, чтобы пользователи вашего кода могли включать и
отключать лексические предупреждения. Используйте (C<use>) прагму
C<warnings::register> в модуле:

=begin programlisting

    package Scary::Monkey;

    B<use warnings::register;>

=end programlisting

Это создаст новую категорию предупреждений, названную по имени пакета
C<Scary::Monkey>. Включите эти предупреждения с помощью
C<use warnings 'Scary::Monkey'> и отключите с помощью
C<no warnings 'Scary::Monkey'>.

Используйте C<warnings::enabled()> чтобы проверить, что категория предупреждения
включена в вызывающей лексической области. Используйте C<warnings::warnif()>
для генерации предупреждений, только если предупреждения действуют. Например,
чтобы выдать предупреждение в категории C<deprecated>:

=begin programlisting

    package Scary::Monkey;

    use warnings::register;

    B<sub import>
    B<{>
        B<warnings::warnif( 'deprecated',>
            B<'empty imports from ' . __PACKAGE__ .>
            B<' are now deprecated' )>
        B<unless @_;>
    B<}>

=end programlisting

См. C<perldoc perllexwarn> для больших подробностей.
